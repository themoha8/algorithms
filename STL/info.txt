Библиотека стандартных шаблонов (Standard Template Library) - предоставляет широкий набор контейнеров, которые могут быть использованы для хранения и управления данными. Эти контейнеры разделяются на несколько категорий в зависимости от их поведения и использования:

1. Последовательные контейнеры (Sequence Containers)

Эти контейнеры поддерживают последовательное хранение элементов:

std::vector: Динамический массив, который может изменять свой размер. Предоставляет быстрый доступ к элементам по индексу (O(1)) и эффективен при добавлении элементов в конец (в среднем O(1), та же операция в начале или середине - O(n)).

std::deque: Двусторонняя очередь, которая позволяет эффективно добавлять и удалять элементы как с начала, так и с конца (O(1)). Обеспечивает доступ к элементам по индексу.

std::list: Двусвязный список. Поддерживает эффективное добавление и удаление элементов в любом месте списка (O(1)), но доступ по индексу медленный (O(n)).

std::forward_list: Односвязный список. Поддерживает только одностороннюю итерацию и эффективные операции вставки/удаления элементов.

std::array: Статический массив фиксированного размера, доступный с C++11. Обеспечивает доступ по индексу (O(1)).

2. Контейнеры ассоциативного типа (Associative Containers)

Эти контейнеры автоматически сортируют элементы и обеспечивают быстрый доступ к элементам по ключу:

std::set: Множество, содержащее уникальные элементы. Обеспечивает быстрый поиск, вставку и удаление элементов (O(log n)).

std::multiset: Множество, в котором могут быть дубликаты элементов. Обеспечивает операции вставки, удаления и поиска (O(log n)).

std::map: Словарь, ассоциирующий ключи с значениями. Поддерживает уникальные ключи и обеспечивает доступ, вставку и удаление элементов по ключу (O(log n)).

std::multimap: Словарь, поддерживающий несколько элементов с одинаковыми ключами. Обеспечивает операции доступа, вставки и удаления (O(log n)).

3. Несортированные контейнеры ассоциативного типа (Unordered Associative Containers)

Эти контейнеры основаны на хеш-таблицах и не поддерживают сортировку, но обеспечивают быстрый доступ по ключу:

std::unordered_set: Множество уникальных элементов с быстрым доступом (среднее время O(1)).

std::unordered_multiset: Множество с возможностью хранения дубликатов и быстрым доступом (среднее время O(1)).

std::unordered_map: Хеш-таблица, ассоциирующая ключи с значениями, с быстрым доступом по ключу (среднее время O(1)).

std::unordered_multimap: Хеш-таблица, поддерживающая несколько элементов с одинаковыми ключами, с быстрым доступом по ключу (среднее время O(1)).

4. Адаптеры контейнеров (Container Adapters)

Эти контейнеры адаптируют существующие контейнеры для предоставления специализированных интерфейсов:

std::stack: Реализует стек (последний вошел — первый вышел, LIFO), обычно основан на std::deque или std::vector.

std::queue: Реализует очередь (первый вошел — первый вышел, FIFO), обычно основан на std::deque.

std::priority_queue: Реализует очередь с приоритетом, которая поддерживает доступ к элементу с наивысшим приоритетом (обычно основана на куче, реализованной через std::vector).

5. Контейнеры фиксированного размера (Fixed-size Containers)

Эти контейнеры предназначены для хранения данных фиксированного размера:

std::bitset: Набор битов фиксированного размера. Предоставляет возможность работы с битами и выполняет логические операции над ними.
Заключение

STL предоставляет богатый набор контейнеров, которые могут быть использованы для различных задач в зависимости от требований к производительности и функциональности. Выбор подходящего контейнера зависит от конкретной задачи и требований к скорости доступа, вставки, удаления и памяти.
